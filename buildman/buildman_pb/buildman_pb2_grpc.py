# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import buildman.buildman_pb.buildman_pb2 as buildman__pb2


class BuildManagerStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/buildman_pb.BuildManager/Ping',
                request_serializer=buildman__pb2.PingRequest.SerializeToString,
                response_deserializer=buildman__pb2.Pong.FromString,
                )
        self.RegisterBuildJob = channel.unary_unary(
                '/buildman_pb.BuildManager/RegisterBuildJob',
                request_serializer=buildman__pb2.BuildJobArgs.SerializeToString,
                response_deserializer=buildman__pb2.BuildPack.FromString,
                )
        self.Heartbeat = channel.stream_unary(
                '/buildman_pb.BuildManager/Heartbeat',
                request_serializer=buildman__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=buildman__pb2.HeartbeatResponse.FromString,
                )
        self.LogMessage = channel.unary_unary(
                '/buildman_pb.BuildManager/LogMessage',
                request_serializer=buildman__pb2.LogMessageRequest.SerializeToString,
                response_deserializer=buildman__pb2.LogMessageResponse.FromString,
                )
        self.DetermineCacheTag = channel.unary_unary(
                '/buildman_pb.BuildManager/DetermineCacheTag',
                request_serializer=buildman__pb2.CachedTagRequest.SerializeToString,
                response_deserializer=buildman__pb2.CachedTag.FromString,
                )


class BuildManagerServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterBuildJob(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogMessage(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetermineCacheTag(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BuildManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=buildman__pb2.PingRequest.FromString,
                    response_serializer=buildman__pb2.Pong.SerializeToString,
            ),
            'RegisterBuildJob': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterBuildJob,
                    request_deserializer=buildman__pb2.BuildJobArgs.FromString,
                    response_serializer=buildman__pb2.BuildPack.SerializeToString,
            ),
            'Heartbeat': grpc.stream_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=buildman__pb2.HeartbeatRequest.FromString,
                    response_serializer=buildman__pb2.HeartbeatResponse.SerializeToString,
            ),
            'LogMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.LogMessage,
                    request_deserializer=buildman__pb2.LogMessageRequest.FromString,
                    response_serializer=buildman__pb2.LogMessageResponse.SerializeToString,
            ),
            'DetermineCacheTag': grpc.unary_unary_rpc_method_handler(
                    servicer.DetermineCacheTag,
                    request_deserializer=buildman__pb2.CachedTagRequest.FromString,
                    response_serializer=buildman__pb2.CachedTag.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'buildman_pb.BuildManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BuildManager(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buildman_pb.BuildManager/Ping',
            buildman__pb2.PingRequest.SerializeToString,
            buildman__pb2.Pong.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterBuildJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buildman_pb.BuildManager/RegisterBuildJob',
            buildman__pb2.BuildJobArgs.SerializeToString,
            buildman__pb2.BuildPack.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Heartbeat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/buildman_pb.BuildManager/Heartbeat',
            buildman__pb2.HeartbeatRequest.SerializeToString,
            buildman__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buildman_pb.BuildManager/LogMessage',
            buildman__pb2.LogMessageRequest.SerializeToString,
            buildman__pb2.LogMessageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetermineCacheTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/buildman_pb.BuildManager/DetermineCacheTag',
            buildman__pb2.CachedTagRequest.SerializeToString,
            buildman__pb2.CachedTag.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
