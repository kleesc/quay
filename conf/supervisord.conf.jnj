{% macro supervisordstdout() -%} # Redirect child process stdout to supervisord's
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stdout
stderr_logfile_maxbytes=0
{%- endmacro %}

[supervisord]
nodaemon=true

[unix_http_server]
file=%(ENV_QUAYCONF)s/supervisord.sock
user=root

[supervisorctl]
serverurl=unix:///%(ENV_QUAYCONF)s/supervisord.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface


{% if logdriver != "syslog" %}
[eventlistener:stdout]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command = supervisor_logging
buffer_size = 1024
events = PROCESS_LOG
{% endif -%}

;;; Run batch scripts
[program:blobuploadcleanupworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.blobuploadcleanupworker.blobuploadcleanupworker
autostart = {{ config['blobuploadcleanupworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:buildlogsarchiver]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.buildlogsarchiver.buildlogsarchiver
autostart = {{ config['buildlogsarchiver']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:builder]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m buildman.builder
autostart = {{ config['builder']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:chunkcleanupworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.chunkcleanupworker
autostart = {{ config['chunkcleanupworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:expiredappspecifictokenworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.expiredappspecifictokenworker
autostart = {{ config['expiredappspecifictokenworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:exportactionlogsworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.exportactionlogsworker
autostart = {{ config['exportactionlogsworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:gcworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.gc.gcworker
autostart = {{ config['gcworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:globalpromstats]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.globalpromstats.globalpromstats
autostart = {{ config['globalpromstats']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:labelbackfillworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.labelbackfillworker
autostart = {{ config['labelbackfillworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:logrotateworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.logrotateworker
autostart = {{ config['logrotateworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:namespacegcworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.namespacegcworker
autostart = {{ config['namespacegcworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:notificationworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.notificationworker.notificationworker
autostart = {{ config['notificationworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:queuecleanupworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.queuecleanupworker
autostart = {{ config['queuecleanupworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:repositoryactioncounter]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.repositoryactioncounter
autostart = {{ config['repositoryactioncounter']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:security_notification_worker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.security_notification_worker
autostart = {{ config['security_notification_worker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:securityworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.securityworker.securityworker
autostart = {{ config['securityworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:storagereplication]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.storagereplication
autostart = {{ config['storagereplication']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:tagbackfillworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.tagbackfillworker
autostart = {{ config['tagbackfillworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:teamsyncworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.teamsyncworker.teamsyncworker
autostart = {{ config['teamsyncworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

;;; Run interactive scripts
[program:dnsmasq]
command=/usr/sbin/dnsmasq --no-daemon --user=root --listen-address=127.0.0.1 --port=8053
autostart = {{ config['dnsmasq']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:gunicorn-registry]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s,
  DB_CONNECTION_POOLING=%(ENV_DB_CONNECTION_POOLING_REGISTRY)s
command=nice -n 10 gunicorn -c %(ENV_QUAYCONF)s/gunicorn_registry.py registry:application
autostart = {{ config['gunicorn-registry']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:gunicorn-secscan]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=gunicorn -c %(ENV_QUAYCONF)s/gunicorn_secscan.py secscan:application
autostart = {{ config['gunicorn-secscan']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:gunicorn-verbs]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=nice -n 10 gunicorn -c %(ENV_QUAYCONF)s/gunicorn_verbs.py verbs:application
autostart = {{ config['gunicorn-verbs']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:gunicorn-web]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=gunicorn -c %(ENV_QUAYCONF)s/gunicorn_web.py web:application
autostart = {{ config['gunicorn-web']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:jwtproxy]
command=/usr/local/bin/jwtproxy --config %(ENV_QUAYCONF)s/jwtproxy_conf.yaml
autostart = {{ config['jwtproxy']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:memcache]
command=memcached -u memcached -m 64 -l 127.0.0.1 -p 18080
autostart = {{ config['memcache']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:nginx]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=nginx -c %(ENV_QUAYCONF)s/nginx/nginx.conf
autostart = {{ config['nginx']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:pushgateway]
command=/usr/local/bin/pushgateway
autostart = {{ config['pushgateway']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:servicekey]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.servicekeyworker.servicekeyworker
autostart = {{ config['servicekey']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}

[program:repomirrorworker]
environment=
  PYTHONPATH=%(ENV_QUAYDIR)s
command=python -m workers.repomirrorworker.repomirrorworker
autostart = {{ config['repomirrorworker']['autostart'] }}
stdout_events_enabled = true
stderr_events_enabled = true
{% if logdriver != "syslog" %}
{{ supervisordstdout() }}
{% endif -%}
